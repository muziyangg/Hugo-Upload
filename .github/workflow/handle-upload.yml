name: Handle File Upload & Compile

# 触发条件：支持仓库事件和手动触发
on:
  repository_dispatch:
    types: [file_uploaded]
  workflow_dispatch:  # 允许手动触发工作流
    inputs:
      compileOnly:
        description: '仅执行编译而不上传新文件'
        required: false
        default: 'false'
        type: string

jobs:
  process-upload:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码仓库
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.UPLOAD_TOKEN }}  # 使用配置的Token确保有推送权限
          
      - name: 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install requests  # 确保安装requests库用于文件下载
          
      - name: 处理上传的文件（非仅编译模式）
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.compileOnly == 'false' }}
        run: |
          python process_upload.py "${{ github.event.client_payload.filename || '' }}" "${{ github.event.client_payload.file_url || '' }}"
          
      - name: 执行编译过程
        run: |
          echo "开始执行编译..."
          # 这里添加实际的编译命令，例如：
          # python compile_files.py
          # 或者对于静态网站可以是：
          # npm run build
          echo "编译完成"
          
      - name: 提交更改
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add .
          # 根据不同触发条件设置不同的提交信息
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            git commit -m "手动触发编译: $(date +'%Y-%m-%d %H:%M:%S')" || echo "没有需要提交的更改"
          else
            git commit -m "自动处理并编译文件: ${{ github.event.client_payload.filename || '未知文件' }}" || echo "没有需要提交的更改"
          fi
          git push
    